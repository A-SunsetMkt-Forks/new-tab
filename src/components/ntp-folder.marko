import { onClick } from '../helpers';
import ntpFolder from './ntp-folder';

static const folderOpenEvent = new Event('o', { bubbles: true });

class {
  onCreate() {
    this.state = {
      show: false,
    }
    this.openTimer = null;
    this.closeTimer = null;

    this.subscribeTo(document).on('o', (event) => {
      const isSubfolder = event.path.some(el => el === this.el);
      if (!isSubfolder) {
        this.state.show = false;
        this.resetCloseTimer();
      }
    });
  }

  onFolderMouseLeave(event) {
    // reset open timer
    if (this.openTimer !== null) {
      clearTimeout(this.openTimer);
      this.openTimer = null;
    }

    // set up close timer
    if (this.state.show) {
      this.closeTimer = setTimeout(() => {
        this.state.show = false;
      }, 400); // close delay
    }
  }

  onFolderMouseEnter() {
    if (this.state.show) {
      this.resetCloseTimer();
    } else {
      // delay to prevent accidental folder open
      this.openTimer = setTimeout(() => {
        // trigger other folders to close
        this.el.dispatchEvent(folderOpenEvent);

        this.state.show = true;
      }, 200); // open delay
    }
  }

  resetCloseTimer() {
    if (this.closeTimer !== null) {
      clearTimeout(this.closeTimer);
      this.closeTimer = null;
    }
  }
}

style {
  .f { /* folder */
    position: relative;
    cursor: pointer;
  }

  .e { /* triangle; caret */
    margin-left: auto;
  }

  .s { /* subfolder */
    position: absolute;
    top: 41px;
    left: 0;
    display: flex;
    flex-direction: column;
    background: var(--g1);
    filter: drop-shadow(0 18px 18px rgba(0,0,0,.3));

    .b { /* bookmark */
      padding: 9px;
    }

    .t { /* bookmark title */
      max-width: 40ch;
    }

    & & {
      top: 0;
      left: 100%;
    }
  }

  .l { /* left side folder */
    right: 0;
    left: initial;

    .s { /* subfolder */
      right: 100%;
      left: initial;
    }
  }
}

div.b.f on-mouseleave('onFolderMouseLeave') on-mouseenter('onFolderMouseEnter') title=input.title
  -- ${input.title}

  // show subfolder indicator
  span.e if(input.parentId > 1) -- â–¶

  if(state.show)
    div.s class=(input.left && 'l')
      for(bookmark in input.children)
        if(bookmark.children !== undefined)
          <!-- folder -->
          include(ntpFolder, bookmark)
        else
          <!-- bookmark -->
          a.b on-click(onClick) href=bookmark.url
            img.i src=`chrome://favicon/${bookmark.url}`
            span.t -- ${bookmark.title}
